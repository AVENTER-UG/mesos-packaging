#!/bin/bash
set -o errexit -o nounset -o pipefail
export LC_ALL=C
function -h {
cat <<USAGE
 USAGE: build_mesos (--repo <git URL>)? (--nominal-version <version>)?

  Performs a build in ./mesos-repo after checking out a recent copy of Mesos.
  The default is to checkout:

    $repo

  You can specify a different Mesos Git URL with \`--repo'. Note that it does
  not work to use an \`='; the \`--repo' option must be separated from the Git
  URL with a space.

  The repo can be given as ...?ref=prod7 or even ...?prod7 to select a
  particular branch to build.

USAGE
}; function --help { -h ;}

this="$(cd "$(dirname "$0")" && pwd -P)"
name=mesos
version=0.14.0

function main {
  while [[ $# -gt 0 ]]
  do
    case "$1" in                                      # Munging globals, beware
      --repo)                   repo="$2"    ; shift 2 ;;
      --nominal-version)        version="$2" ; shift 2 ;;
      *)                        err 'Argument error. Please see help.' ;;
    esac
  done
  checkout go
}

function go {
  build
  create_installation
  pkg
}

repo=https://git-wip-us.apache.org/repos/asf/mesos.git
function checkout {
  local url=( $(url_split "$repo") )
  local repository="${url[0]}"
  local query="${url[1]:-}"
  if [[ ${url[2]:-} ]]
  then err "Setting fragment (#) does nothing. Try query (?) instead."
  fi
  case "$query" in
    ref=*|h=*|branch=*|tag=*) local ref="${query#*=}" ;;
    *)                        local ref="$query" ;;
  esac
  if [[ -d mesos-repo ]]
  then msg "Found directory \`mesos-repo'; skipping checkout."
  else msg "Cloning: $repository at $ref" && git clone "$repository" mesos-repo
  fi
  ( cd mesos-repo && ( [[ ! ${ref:-} ]] || git checkout -f "$ref" ) && "$@" )
}

function build {(
  autoreconf -f -i -Wall,no-obsolete
  ./bootstrap
  mkdir -p build
  cd build
  ../configure
  make
)}

function os_release {
  ( source /etc/os-release && out "$ID/$VERSION_ID" )
}

function create_installation {(
  local pwd="$(pwd -P)"
  mkdir -p deb
  ( cd build && make install DESTDIR="$pwd"/deb )
  cd deb
  mkdir -p usr/share/doc/mesos etc/default etc/mesos var/log/mesos
  cp ../CHANGELOG               usr/share/doc/mesos/
  cp "$this"/default/mesos*     etc/default/
  echo zk://localhost:2181/mesos > etc/mesos/zk
  init_scripts "$linux"
  jars
)}

function init_scripts {
  case "$1" in
    debian/*) mkdir -p etc/init.d
              cp -p "$this"/debian/master.init etc/init.d/mesos-master
              cp -p "$this"/debian/slave.init etc/init.d/mesos-slave ;;
    ubuntu/*) mkdir -p etc/init
              cp "$this"/ubuntu/master.upstart etc/init/mesos-master.conf
              cp "$this"/ubuntu/slave.upstart etc/init/mesos-slave.conf ;;
    *) err "Not sure how to make init scripts for: $1" ;;
  esac
}

function jars {
  mkdir -p usr/share/java/
  mv ../build/src/mesos-*.jar usr/share/java/
}

function pkg {
  case "$linux" in
    ubuntu/*|debian/*) deb_ ;;
    centos/*|redhat/*) rpm_ ;;
    *)                 err "Not sure how to package for: $linux" ;;
  esac
}

function architecture {
  case "$linux" in
    ubuntu/*|debian/*) dpkg-architecture -qDEB_BUILD_ARCH ;;
    centos/*|redhat/*) arch ;;
    *)                 err "Not sure how to determine arch for: $linux" ;;
  esac
}

function find_gem_bin {
  gem env | sed -n '/^ *- EXECUTABLE DIRECTORY: */ { s/// ; p }'
}

function deb_ {
  local version="$version"
  if git rev-parse --git-dir &>/dev/null
  then version="$version~$(git log -n1 --format=%h)"
  fi
  local scripts="${linux%%/*}"
  local opts=()
  opts=( -t deb
         -n "$name"
         -v "$version"
         --description
"Cluster resouce manager with efficient resource isolation
 Apache Mesos is a cluster manager that offers efficient resource isolation
 and sharing across distributed applications, or frameworks. It can run
 Hadoop, MPI, Hypertable, Spark (a new framework for low-latency interactive
 and iterative jobs), and other applications."
         --url=http://incubator.apache.org/mesos/
         -a "$arch"
         --category misc
         --vendor ""
         -m mesos-dev@incubator.apache.org
         --prefix=/
         --deb-recommends "python >= 2.6"
         --deb-recommends zookeeper
         --deb-recommends zookeeperd
         --deb-recommends zookeeper-bin
         -d libcurl3
         -d default-jre
         --after-install "$this/$scripts/mesos.postinst"
         --after-remove "$this/$scripts/mesos.postrm"
         -s dir )
  ( cd deb && "$gem_bin"/fpm "${opts[@]}" -p "$this"/pkg.deb -- . )
}

function rpm_ {
  err "Not implemented."
}

function upload {
  local pkg="$name"_"$version"_"$arch".deb
  local url="${1%/}"/"$linux"/"$pkg"
  curl -X PUT "$url" --data-binary @"$2" >/dev/null
  out "$url"
}

function get_system_info {
  linux="$(os_release)"                 # <distro>/<version>, like ubuntu/12.10
  arch="$(architecture)"          # In the format used to label distro packages
  gem_bin="$(find_gem_bin)"                          # Might not be on the PATH
}

function url_fragment {
  local step1="${1%#}"#       # Ensure URL ends in #, even if it has a fragment
  local step2="${step1#*#}"                                # Clip up to first #
  out "${step2%#}"                    # Remove trailing #, guaranteed by step 1
}

# Split URL in to resource, query and fragment.
function url_split {
  local fragment= query=
  local sans_fragment="${1%%#*}"
  local sans_query="${sans_fragment%%'?'*}"
  [[ $1             = $sans_fragment ]] || fragment="${1#*#}"
  [[ $sans_fragment = $sans_query    ]] || query="${sans_fragment#*'?'}"
  out "$sans_query"
  out "$query"
  out "$fragment"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then
  case "$1" in
    -h|--help|url_split) : ;; # Skip system info lookup
    *)         get_system_info ;;
  esac
  "$@"
else
  get_system_info
  main "$@"
fi

